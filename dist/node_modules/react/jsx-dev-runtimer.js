(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtimer"] = global["jsx-dev-runtimer"] || {}, global["jsx-dev-runtimer"].js = {})));
})(this, (function (exports) { 'use strict';

	var surrpotSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = surrpotSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	var ReactElement = function (type, ref, key, props) {
	    var element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type: type,
	        ref: ref,
	        key: key,
	        props: props,
	        __mark: 'Xin'
	    };
	    return element;
	};
	var jsx = function (type, config) {
	    var maybeChldren = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        maybeChldren[_i - 2] = arguments[_i];
	    }
	    var key = null;
	    var ref = null;
	    var props = null;
	    for (var propName in config) {
	        if (propName === 'key' && config[propName] !== undefined) {
	            key = config[propName];
	            continue;
	        }
	        if (propName === 'ref' && config[propName] !== undefined) {
	            ref = config[propName];
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, propName)) {
	            props[propName] = config[propName];
	        }
	    }
	    if (maybeChldren.length > 0) {
	        if (maybeChldren.length === 1) {
	            props.children = maybeChldren[0];
	        }
	        else {
	            props.children = maybeChldren;
	        }
	    }
	    return ReactElement(type, ref, key, props);
	};
	var jsxDEV = jsx;

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
